#@version ">=2.0.1"

tasks:
    solr.core.remove:
        help: |
            remove core.
        flags:
            purge: false
        args:
            target_env: ? "development"
        do:
            - curl -s "http://$(solr.envs[target_env].host):$(solr.envs[target_env].port)/solr/admin/cores?action=UNLOAD&core=$(solr.envs[target_env].core)" || exit 0
            - @(if purge) ssh $(solr.get.ssh(target_env)) "rm -rf $(solr.envs[target_env].prefix)/$(solr.envs[target_env].core)"
    solr.core.install:
        help: |
            Install a new core.
        flags:
            simulate: false
        opts:
            location: str("etc/solr")
            config: str("solrconfig.xml")
            schema: str("schema.xml")
            dataDir: str("data")
            classpath: str("/opt/solr/server/solr/mycores/")
        args:
            target_env: ? "development"
        do: |
            if (( "$$(find $(location) -type f -name $(schema) | wc -l )" <= 0 )); then
                echo "Could not find $(schema) in $(location)."
            else
                 if (( "$$(ssh $(solr.get.ssh(target_env)) 'find -name $(solr.envs[target_env].core) | wc -l')" >= "1" )); then
                    echo "Core $(solr.envs[target_env].core) already installed."
                 else
                    rsync -ruv $(simulate ? "--dry-run") \
                        --exclude=core.properties \
                        $$(echo "$(location)/"|sed s#//*#/#g) \
                        $(solr.get.ssh(target_env)):$$(echo "$(solr.envs[target_env].prefix)/$(solr.envs[target_env].core)/"|sed s#//*#/#g) && \
                    [[ "$(simulate)" -ne "1" ]] && \
                        curl -s \
                            "http://$(solr.envs[target_env].host):$(solr.envs[target_env].port)/solr/admin/cores?action=CREATE&name=$(solr.envs[target_env].core)&config=$(config)&schema=$(schema)&dataDir=$(dataDir)&instanceDir=$(classpath)$(solr.envs[target_env].core)" \
                     || \
                        echo "REQUEST_URL:: http://$(solr.envs[target_env].host):$(solr.envs[target_env].port)/solr/admin/cores?action=CREATE&name=$(solr.envs[target_env].core)&config=$(config)&schema=$(schema)&dataDir=$(dataDir)&instanceDir=$(classpath)$(solr.envs[target_env].core)"
                 fi
            fi
    solr.schema.install:
        help: |
            Installs a schema and optionally other config files in the remote prefix, and optionally reloads SOLR
        flags:
            reload: true
            simulate: false
        args:
            target_env: ? "development"
        do:
          - |
                rsync -vr $(simulate ? "--dry-run") --inplace etc/solr/conf/* $(solr.get.ssh(target_env)):$(solr.envs[target_env].prefix)/$(solr.envs[target_env].core)/conf/
          - @(if reload && !simulate) @solr.reload
          - @(if reload && simulate) echo "Would reload core $(solr.envs[target_env].core) at $(target_env)"

    solr.reload:
        help: |
            Reloads the solr core at the specified target environment by issuing a RELOAD action to the core's admin
        args:
            target_env: ?
        do: |
            @(sh solr.do.ssh(target_env))
                curl -s "http://$(solr.envs[target_env].host):$(solr.envs[target_env].port)/solr/admin/cores?action=RELOAD&core=$(solr.envs[target_env].core)"

    solr.status:
        help: |
            Show the SOLR status as reported by the STATUS action of the core's admin
        args:
            target_env: ?
        do: |
            @(sh solr.do.ssh(target_env))
                curl -s "http://$(solr.envs[target_env].host):$(solr.envs[target_env].port)/solr/admin/cores?action=STATUS&core=$(solr.envs[target_env].core)"

    solr.purge:
        help: |
            Purge an entire SOLR status as reported by the STATUS action of the core's admin
        args:
            target_env: ?
        flags:
            local: false
        do: |
            @(sh local ? SHELL : solr.do.ssh(target_env))
                cd $(envs[local ? "local" : target_env].root) && php app/console zicht:solr:purge --env=$(target_env)

    solr.reindex:
        help: |
            Reindex and optionally purge entries specified in `solr.entities`.

            Note that the purge clears the entire index and should only be used in development.
        args:
            target_env: ?
            entities[]: ? solr.entities
        flags:
            local: false
            purge: false
        opts:
            limit: 0
            offset: 0
        do:
            - @(if purge) @solr.purge
            - |
                @(sh (local ? SHELL : solr.do.ssh(target_env)))
                @(for entity in entities)
                    cd $(local ? envs["local"].root : envs[target_env].root) && \
                        php app/console zicht:solr:reindex      \
                            $(offset ? cat("--offset ", offset)) \
                            $(limit ? cat("--limit ", limit))   \
                            $(escape entity) $(!VERBOSE ? "-q")      \
                            --env=$(target_env)

    solr.batch-reindex:
        help: |
            Do a batched reindex of the specified environment.

            This is particularly helpful if the remote environment crashes on the amount of records
            to index. You need to specify the amount of items per batch and a total number of
            records.
        args:
            target_env: ?
            total: ?
            per_batch: ?
            entities[]: ? solr.entities
        flags:
            local: false
            purge: false
        do:
            - @(if purge) @solr.purge
            - |
                @(for v in range((total/per_batch)-1, 0)) 
                $(z.cmd) $(z.opts) solr:reindex $(target_env)   \
                    $(escape entities)                          \
                    --no-purge                                  \
                    $(local ? "--local")                        \
                    --limit=$(per_batch)                        \
                    --offset=$(v * per_batch)
